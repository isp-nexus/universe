/**
 * @copyright OpenISP, Inc.
 * @license AGPL-3.0
 * @author Teffen Ellis, et al.
 *
 *   SQL migration utilities.
 */

import { smartSnakeCase } from "@isp.nexus/core"
import { findCachedSpatialiteExtensionPath } from "../path-builder.js"

export type MigrationDirection = "up" | "down"

/**
 * Options for creating a migration.
 *
 * @category SQL
 */
export interface MigrationOptions {
	/**
	 * The migration ID, e.g. `create_users_table`.
	 */
	id: string

	/**
	 * The direction of the migration. Up for applying the migration, down for reverting it.
	 */
	direction?: MigrationDirection

	/**
	 * The timestamp of the migration. Determines the order in which migrations are applied.
	 */
	timestamp?: number | string
}

/**
 * Creates a migration file name.
 *
 * @category SQL
 */
export function migrationIDToFileName({ id, direction = "up", timestamp = Date.now() }: MigrationOptions) {
	const fileName = `${timestamp}-${smartSnakeCase(id)}.${direction}.sql`

	return fileName
}

/**
 * Parses a migration file name.
 *
 * @category SQL
 * @internal
 */
export function parseMigrationFileName(input: string) {
	const match = input.match(/(\d+)-(.+)\.(up|down)\.sql$/)

	if (!match) {
		throw new Error(`Invalid migration file name: ${input}`)
	}

	const [, timestamp, name, direction] = match

	return {
		timestamp: parseInt(timestamp!),
		name: name!,
		direction: direction as MigrationDirection,
	}
}

/**
 * Creates a preamble to document the migration.
 *
 * @category SQL
 */
export function migrationPreamble({ id, direction = "up", timestamp = Date.now() }: MigrationOptions) {
	const preamble = /* sql */ `
	-- sqlite
	-- @migration ${id} (${direction})
	-- @createdAt ${parseInt(timestamp.toString(), 10)}
	-- @copyright OpenISP, Inc.
	-- @license AGPL-3.0
	-- @author Teffen Ellis, et al.
	--
	-- This migration was generated by the ISP Nexus SDK.
	-- For more information, visit https://open.isp.nexus
	`

	return preamble
}

/**
 * Creates a migration template.
 *
 * @category SQL
 * @returns `migrationTemplate` The migration template.
 */
export function createMigrationTemplate(migrationBody: string, options: MigrationOptions): string {
	const preamble = migrationPreamble(options)

	return `${preamble}\n\n${migrationBody}`
}

/**
 * Emits a template for initializing a SpatiaLite database.
 *
 * This is useful for initializing tables with spatial metadata.
 *
 * @category SQL
 */
export function spatialiteInitTemplate(): string {
	return /* sql */ `
	SELECT load_extension('${findCachedSpatialiteExtensionPath()}');

	SELECT InitSpatialMetadata();`
}
