diff --git a/lib/index.es.js b/lib/index.es.js
index aae9799c1a8798d5899ffed6deda4c98b7007b48..37bb8d61e9f870598aa4e1299edaee38cd8b231d 100644
--- a/lib/index.es.js
+++ b/lib/index.es.js
@@ -3,7 +3,6 @@ process.emitWarning("The .es.js file is deprecated. Use .mjs instead.");
 import Stream from 'stream';
 import http from 'http';
 import Url from 'url';
-import whatwgUrl from 'whatwg-url';
 import https from 'https';
 import zlib from 'zlib';
 
@@ -1138,7 +1137,6 @@ Object.defineProperty(Response.prototype, Symbol.toStringTag, {
 });
 
 const INTERNALS$2 = Symbol('Request internals');
-const URL = Url.URL || whatwgUrl.URL;
 
 // fix an issue where "format", "parse" aren't a named export for node <10
 const parse_url = Url.parse;
@@ -1397,14 +1395,12 @@ AbortError.prototype = Object.create(Error.prototype);
 AbortError.prototype.constructor = AbortError;
 AbortError.prototype.name = 'AbortError';
 
-const URL$1 = Url.URL || whatwgUrl.URL;
-
 // fix an issue where "PassThrough", "resolve" aren't a named export for node <10
 const PassThrough$1 = Stream.PassThrough;
 
 const isDomainOrSubdomain = function isDomainOrSubdomain(destination, original) {
-	const orig = new URL$1(original).hostname;
-	const dest = new URL$1(destination).hostname;
+	const orig = new URL(original).hostname;
+	const dest = new URL(destination).hostname;
 
 	return orig === dest || orig[orig.length - dest.length - 1] === '.' && orig.endsWith(dest);
 };
@@ -1417,8 +1413,8 @@ const isDomainOrSubdomain = function isDomainOrSubdomain(destination, original)
  * @param {string|URL} destination
  */
 const isSameProtocol = function isSameProtocol(destination, original) {
-	const orig = new URL$1(original).protocol;
-	const dest = new URL$1(destination).protocol;
+	const orig = new URL(original).protocol;
+	const dest = new URL(destination).protocol;
 
 	return orig === dest;
 };
@@ -1545,7 +1541,7 @@ function fetch(url, opts) {
 				// HTTP fetch step 5.3
 				let locationURL = null;
 				try {
-					locationURL = location === null ? null : new URL$1(location, request.url).toString();
+					locationURL = location === null ? null : new URL(location, request.url).toString();
 				} catch (err) {
 					// error here can only be invalid URL in Location: header
 					// do not throw when options.redirect == manual
diff --git a/lib/index.js b/lib/index.js
index 567ff5da58e83683bec0ea9e86221041ddf9435f..7b775e0b6e99b4e9bebd15ae834429248da38208 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -7,7 +7,6 @@ function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'defau
 var Stream = _interopDefault(require('stream'));
 var http = _interopDefault(require('http'));
 var Url = _interopDefault(require('url'));
-var whatwgUrl = _interopDefault(require('whatwg-url'));
 var https = _interopDefault(require('https'));
 var zlib = _interopDefault(require('zlib'));
 
@@ -1142,7 +1141,6 @@ Object.defineProperty(Response.prototype, Symbol.toStringTag, {
 });
 
 const INTERNALS$2 = Symbol('Request internals');
-const URL = Url.URL || whatwgUrl.URL;
 
 // fix an issue where "format", "parse" aren't a named export for node <10
 const parse_url = Url.parse;
@@ -1401,14 +1399,13 @@ AbortError.prototype = Object.create(Error.prototype);
 AbortError.prototype.constructor = AbortError;
 AbortError.prototype.name = 'AbortError';
 
-const URL$1 = Url.URL || whatwgUrl.URL;
 
 // fix an issue where "PassThrough", "resolve" aren't a named export for node <10
 const PassThrough$1 = Stream.PassThrough;
 
 const isDomainOrSubdomain = function isDomainOrSubdomain(destination, original) {
-	const orig = new URL$1(original).hostname;
-	const dest = new URL$1(destination).hostname;
+	const orig = new URL(original).hostname;
+	const dest = new URL(destination).hostname;
 
 	return orig === dest || orig[orig.length - dest.length - 1] === '.' && orig.endsWith(dest);
 };
@@ -1421,8 +1418,8 @@ const isDomainOrSubdomain = function isDomainOrSubdomain(destination, original)
  * @param {string|URL} destination
  */
 const isSameProtocol = function isSameProtocol(destination, original) {
-	const orig = new URL$1(original).protocol;
-	const dest = new URL$1(destination).protocol;
+	const orig = new URL(original).protocol;
+	const dest = new URL(destination).protocol;
 
 	return orig === dest;
 };
@@ -1549,7 +1546,7 @@ function fetch(url, opts) {
 				// HTTP fetch step 5.3
 				let locationURL = null;
 				try {
-					locationURL = location === null ? null : new URL$1(location, request.url).toString();
+					locationURL = location === null ? null : new URL(location, request.url).toString();
 				} catch (err) {
 					// error here can only be invalid URL in Location: header
 					// do not throw when options.redirect == manual
diff --git a/lib/index.mjs b/lib/index.mjs
index 2863dd9c318754a77c6bfb57ec5e7db8759abd8b..48ead077d4a71b33543f61f176915af2a248225a 100644
--- a/lib/index.mjs
+++ b/lib/index.mjs
@@ -1,7 +1,6 @@
 import Stream from 'stream';
 import http from 'http';
 import Url from 'url';
-import whatwgUrl from 'whatwg-url';
 import https from 'https';
 import zlib from 'zlib';
 
@@ -1136,7 +1135,6 @@ Object.defineProperty(Response.prototype, Symbol.toStringTag, {
 });
 
 const INTERNALS$2 = Symbol('Request internals');
-const URL = Url.URL || whatwgUrl.URL;
 
 // fix an issue where "format", "parse" aren't a named export for node <10
 const parse_url = Url.parse;
@@ -1395,14 +1393,12 @@ AbortError.prototype = Object.create(Error.prototype);
 AbortError.prototype.constructor = AbortError;
 AbortError.prototype.name = 'AbortError';
 
-const URL$1 = Url.URL || whatwgUrl.URL;
-
 // fix an issue where "PassThrough", "resolve" aren't a named export for node <10
 const PassThrough$1 = Stream.PassThrough;
 
 const isDomainOrSubdomain = function isDomainOrSubdomain(destination, original) {
-	const orig = new URL$1(original).hostname;
-	const dest = new URL$1(destination).hostname;
+	const orig = new URL(original).hostname;
+	const dest = new URL(destination).hostname;
 
 	return orig === dest || orig[orig.length - dest.length - 1] === '.' && orig.endsWith(dest);
 };
@@ -1415,8 +1411,8 @@ const isDomainOrSubdomain = function isDomainOrSubdomain(destination, original)
  * @param {string|URL} destination
  */
 const isSameProtocol = function isSameProtocol(destination, original) {
-	const orig = new URL$1(original).protocol;
-	const dest = new URL$1(destination).protocol;
+	const orig = new URL(original).protocol;
+	const dest = new URL(destination).protocol;
 
 	return orig === dest;
 };
@@ -1543,7 +1539,7 @@ function fetch(url, opts) {
 				// HTTP fetch step 5.3
 				let locationURL = null;
 				try {
-					locationURL = location === null ? null : new URL$1(location, request.url).toString();
+					locationURL = location === null ? null : new URL(location, request.url).toString();
 				} catch (err) {
 					// error here can only be invalid URL in Location: header
 					// do not throw when options.redirect == manual
diff --git a/package.json b/package.json
index e0be17689a436a7734b168e8d12f5e97e054f0a5..4cf9b54ab798b6122f170f63aadd7655cd71b6f3 100644
--- a/package.json
+++ b/package.json
@@ -36,9 +36,6 @@
         "url": "https://github.com/bitinn/node-fetch/issues"
     },
     "homepage": "https://github.com/bitinn/node-fetch",
-    "dependencies": {
-        "whatwg-url": "^5.0.0"
-    },
     "peerDependencies": {
         "encoding": "^0.1.0"
     },
