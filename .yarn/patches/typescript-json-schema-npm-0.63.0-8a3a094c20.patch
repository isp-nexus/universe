diff --git a/dist/typescript-json-schema.js b/dist/typescript-json-schema.js
index 7bc282b6ba8b27be2cb51d4fb70ff10699ff27f3..c7189b99af38c6be68e9f0ed078c8f08440591d4 100644
--- a/dist/typescript-json-schema.js
+++ b/dist/typescript-json-schema.js
@@ -55,6 +55,10 @@ var crypto_1 = require("crypto");
 var ts = require("typescript");
 var path_equal_1 = require("path-equal");
 var vm = require("vm");
+/**
+ * @monkeypatch Fixes imports on ES6 modules
+ */
+var REGEX_IMPORT_WITH_ASSERTION = /,\s*\{.*\}/;
 var REGEX_FILE_NAME_OR_SPACE = /(\bimport\(".*?"\)|".*?")\.| /g;
 var REGEX_TSCONFIG_NAME = /^.*\.json$/;
 var REGEX_TJS_JSDOC = /^-([\w]+)\s+(\S|\S[\s\S]*\S)\s*$/g;
@@ -959,6 +963,7 @@ var JsonSchemaGenerator = (function () {
         }
         return this.makeTypeNameUnique(typ, this.tc
             .typeToString(typ, undefined, ts.TypeFormatFlags.NoTruncation | ts.TypeFormatFlags.UseFullyQualifiedType)
+            .replace(REGEX_IMPORT_WITH_ASSERTION, "")
             .replace(REGEX_FILE_NAME_OR_SPACE, ""));
     };
     JsonSchemaGenerator.prototype.makeTypeNameUnique = function (typ, baseName) {
@@ -1027,6 +1032,7 @@ var JsonSchemaGenerator = (function () {
         if (asTypeAliasRef) {
             var typeName = this.tc
                 .getFullyQualifiedName(reffedType.getFlags() & ts.SymbolFlags.Alias ? this.tc.getAliasedSymbol(reffedType) : reffedType)
+                .replace(REGEX_IMPORT_WITH_ASSERTION, "")
                 .replace(REGEX_FILE_NAME_OR_SPACE, "");
             if (this.args.uniqueNames && reffedType) {
                 var sourceFile = getSourceFile(reffedType);
